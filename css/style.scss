@import "fonts";
@import url('https://fonts.googleapis.com/css?family=Proxima+Nova');

$fontFamily: proxima-nova, sans-serif;
$proNovaBlack: ProximaNova-Black;
$proNovaBlackIt: ProximaNova-BlackIt;
$proNovaBlackIt: ProximaNova-BlackIt;
$proNovaBlackIt: ProximaNova-BlackIt;
$proNovaBold: ProximaNova-Bold;
$proNovaLight: ProximaNova-Light;
$proNovaLightIt: ProximaNova-LightIt;
$proNovaReg: ProximaNova-Reg;
$proNovaRegIt: ProximaNova-RegIt;
$proNovaSbold: ProximaNova-Sbold;
$proNovaSboldIt: ProximaNova-SboldIt;
$proNovaThin: ProximaNova-Thin;
$proNovaThinIt: ProximaNova-ThinIt;
$proNovaXbold: ProximaNova-Xbold;

$whiteColor: rgb(255, 255, 255);
$lightWhiteColor: rgb(248, 248, 249);
$blackColor: rgb(0, 0, 0);
$lighterBlackColor: rgb(11, 11, 11);
$lightBlackColor: rgb(36, 36, 36);
$themeColor: rgb(50, 192, 204);
$grayColor: rgb(142, 142, 142);
$darkGray: rgb(103, 103, 103);
$lightGray: rgb(214, 214, 213);

@mixin proNovaThin(){
  font-family: $proNovaThin;
  font-style: normal;
  //font-weight: 100;
  font-weight: normal;
}
@mixin proNovaLight(){
  font-family: $proNovaLight;
  font-style: normal;
  //font-weight: 300;
  font-weight: normal;
}
@mixin proNovaRegular(){
  font-family: $proNovaReg;
  font-style: normal;
  //font-weight: 400;
  font-weight: normal;
}
@mixin proNovaMedium(){
  font-family: $fontFamily;   // Not found
  font-style: normal;
  //font-weight: 500;
  font-weight: normal;
}
@mixin proNovaMedium(){
  font-family: $fontFamily;   // Not found
  font-style: normal;
  //font-weight: 500;
  font-weight: normal;
}
@mixin proNovaSemiBold(){
  font-family: $proNovaSbold;
  font-style: normal;
  //font-weight: 600;
  font-weight: normal;
}
@mixin proNovaBold(){
  font-family: $proNovaBold;
  font-style: normal;
  //font-weight: 700;
  font-weight: normal;
}
@mixin proNovaExtraBold(){
  font-family: $proNovaXbold;
  font-style: normal;
  //font-weight: 800;
  font-weight: normal;
}
@mixin proNovaBlack(){
  font-family: $proNovaBlack;
  font-style: normal;
  //font-weight: 900;
  font-weight: normal;
}

$breakPoints:(
        xs: 576px,
        sm: 768px,
        md: 992px,
        lg: 1200px
);

@mixin media-breakpoint-below($breakPoint){
  @if(map_has_key($breakPoints, $breakPoint)){
    $breakPoints-value: map_get($breakPoints, $breakPoint);
    @media (max-width: ($breakPoints-value - 1)) {
      @content
    }
  }@else{
    @warn "Invalid breakpoint: #{$breakPoint}.";
  }
}

@mixin media-breakpoint-between($lower, $upper){
  @if(map_has_key($breakPoints, $lower)) and map_has_key($breakPoints, $upper){
    $lower-breakPoints-value: map_get($breakPoints, $lower);
    $upper-breakPoints-value: map_get($breakPoints, $upper);
    @media (min-width: $lower-breakPoints-value) and (max-width: $upper-breakPoints-value - 1px){
      @content
    }
  }@else{
    @if(map_has_key($breakPoints, $lower) == false){
      @warn "Invalid breakpoint: #{$lower}";
    }
    @if(map_has_key($breakPoints, $upper) == false){
      @warn "Invalid breakpoint: #{$upper}";
    }
  }
}
@mixin media-breakpoint-above($breakPoint){
  @if(map_has_key($breakPoints, $breakPoint)){
    $breakPoints-value: map_get($breakPoints, $breakPoint);
    @media (min-width: ($breakPoints-value)) {
      @content
    }
  }@else{
    @warn "Invalid breakpoint: #{$breakPoint}.";
  }
}

@include media-breakpoint-below(sm){
  .btn-lg{
    padding: .75rem 3rem!important;
  }
}
@include media-breakpoint-between(sm, md){
  .btn-lg{
    padding: .75rem 3rem;
  }
}
@include media-breakpoint-between(md, lg){
  .btn-lg{
    padding: 1rem 3.5rem!important;
  }
}
@include media-breakpoint-above(lg){
  .btn-lg{
    padding: 1.25rem 4rem;
  }
}
